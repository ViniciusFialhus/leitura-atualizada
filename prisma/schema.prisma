generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  name          String     @db.VarChar(255)
  email         String     @unique
  isAdm         Boolean    @default(false)
  password      String     @db.VarChar(200)
  username      String     @db.VarChar(50)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  shareableHash String     @db.Char(20)
  refreshToken  String?
  Wishlist      Wishlist[]
  Loan          Loan[]

  @@map("users")
}

model Book {
  id          String     @id @default(uuid())
  title       String     @db.VarChar(100)
  author      String     @db.VarChar(100)
  genre       String     @db.VarChar(100)
  description String?    @db.VarChar(10000)
  isbn        String     @unique @db.VarChar(20)
  imgUrl      String?    @db.VarChar(200)
  status      BookStatus @default(AVAILABLE)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Wishlist    Wishlist[]
  Loan        Loan[]

  @@map("books")
}

enum BookStatus {
  AVAILABLE
  LOANED
}

model Loan {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  book       Book       @relation(fields: [bookId], references: [id])
  userId     String
  bookId     String
  pickupDate DateTime   @default(now())
  dueDate    DateTime
  status     LoanStatus @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("loans")
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  OVERDUE
}

model Wishlist {
  entryId String @id @default(uuid())
  userId  String
  bookId  String
  book    Book   @relation(fields: [bookId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@map("wishlist")
}
